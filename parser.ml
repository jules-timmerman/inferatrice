type token =
  | VAR of (string)
  | CST of (string)
  | INT of (int)
  | LPAR
  | COMMA
  | RPAR
  | DERIVE
  | FROM
  | STOP
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
let rec term_of_int acc x =
  if x = 0 then acc else term_of_int (Term.App("s",[acc])) (x-1)
let term_of_int x = term_of_int (Term.App("z",[])) x
# 21 "parser.ml"
let yytransl_const = [|
  260 (* LPAR *);
  261 (* COMMA *);
  262 (* RPAR *);
  263 (* DERIVE *);
  264 (* FROM *);
  265 (* STOP *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* CST *);
  259 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\005\000\004\000\
\004\000\004\000\006\000\006\000\006\000\007\000\007\000\007\000\
\007\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\001\000\005\000\003\000\004\000\000\000\
\001\000\003\000\000\000\001\000\003\000\001\000\001\000\004\000\
\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\001\000\018\000\000\000\000\000\
\004\000\019\000\000\000\000\000\000\000\002\000\000\000\003\000\
\000\000\000\000\006\000\014\000\000\000\017\000\000\000\000\000\
\010\000\000\000\000\000\007\000\000\000\005\000\000\000\013\000\
\016\000"

let yydgoto = "\003\000\
\006\000\010\000\007\000\011\000\012\000\023\000\024\000"

let yysindex = "\008\000\
\001\000\002\000\000\000\254\254\000\000\000\000\001\000\013\255\
\000\000\000\000\009\255\014\255\003\255\000\000\002\255\000\000\
\254\254\254\254\000\000\000\000\016\255\000\000\001\255\017\255\
\000\000\012\255\002\255\000\000\002\255\000\000\018\255\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\019\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\255\000\000\000\000\021\255\000\000\
\019\255\019\255\000\000\000\000\008\255\000\000\000\000\024\255\
\000\000\000\000\021\255\000\000\021\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\016\000\000\000\000\000\254\255\021\000\235\255\000\000"

let yytablesize = 264
let yytable = "\008\000\
\005\000\009\000\020\000\021\000\022\000\031\000\028\000\032\000\
\001\000\002\000\018\000\019\000\015\000\015\000\025\000\026\000\
\015\000\016\000\017\000\027\000\030\000\029\000\014\000\033\000\
\013\000\000\000\011\000\008\000\009\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\004\000"

let yycheck = "\002\001\
\000\000\000\000\001\001\002\001\003\001\027\000\006\001\029\000\
\001\000\002\000\008\001\009\001\005\001\006\001\017\000\018\000\
\004\001\009\001\005\001\004\001\009\001\005\001\007\000\006\001\
\004\000\255\255\006\001\009\001\009\001\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\255\255\007\001"

let yynames_const = "\
  LPAR\000\
  COMMA\000\
  RPAR\000\
  DERIVE\000\
  FROM\000\
  STOP\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  CST\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 24 "parser.mly"
                ( [] )
# 168 "parser.ml"
               : string Ast.Rule.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Ast.Rule.t list) in
    Obj.repr(
# 25 "parser.mly"
                ( _1::_2 )
# 176 "parser.ml"
               : string Ast.Rule.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atoms) in
    Obj.repr(
# 28 "parser.mly"
                ( _1 )
# 183 "parser.ml"
               : string Ast.Atom.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
                ( exit 0 )
# 189 "parser.ml"
               : string Ast.Atom.t list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'atom) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'atoms) in
    Obj.repr(
# 32 "parser.mly"
                                ( _2,_4 )
# 197 "parser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 33 "parser.mly"
                                ( _2,[] )
# 204 "parser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'terms) in
    Obj.repr(
# 36 "parser.mly"
                                ( Atom (_1,_3) )
# 212 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                                ( [] )
# 218 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 40 "parser.mly"
                                ( [_1] )
# 225 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atoms) in
    Obj.repr(
# 41 "parser.mly"
                                ( _1::_3 )
# 233 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                                ( [] )
# 239 "parser.ml"
               : 'terms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 45 "parser.mly"
                                ( [_1] )
# 246 "parser.ml"
               : 'terms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'terms) in
    Obj.repr(
# 46 "parser.mly"
                                ( _1::_3 )
# 254 "parser.ml"
               : 'terms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                                ( Var _1 )
# 261 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "parser.mly"
                                ( App (_1,[]) )
# 268 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'terms) in
    Obj.repr(
# 51 "parser.mly"
                                ( App (_1,_3) )
# 276 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 52 "parser.mly"
                                ( term_of_int _1 )
# 283 "parser.ml"
               : 'term))
(* Entry rules *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry query *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let rules (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string Ast.Rule.t list)
let query (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : string Ast.Atom.t list)
